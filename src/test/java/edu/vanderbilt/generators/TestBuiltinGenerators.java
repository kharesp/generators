package edu.vanderbilt.generators;

import org.junit.Test;
import org.junit.Assert;

import java.util.function.Predicate;

/**
 * Created by kharesp on 7/7/16.
 */
public class TestBuiltinGenerators {
    public static <T> void test(String description, Generator<T> gen, Predicate<T> testPredicate, int iterations){
        for(int i=0; i< iterations; i++){
            T val= gen.generate();
            Assert.assertTrue("Test:\'"+description+"\' failed for value: "+ val,testPredicate.test(val));
        }
        System.out.format("Test:\'"+description+"\' passed for %d iterations\n",iterations);
    }
    public static <T> void test(String description, Generator<T> gen, Predicate<T> testPredicate){
        test(description, gen,testPredicate,100);
    }
    @Test
    public void testIntGenerator(){
        test("Integer value generated by intGen must be in range",
                BuiltinGenerators.intGen(),
                x -> (x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE));
    }
    @Test
    public void testByteGenerator(){
        test("Byte value generated by byteGen must be in range",
                BuiltinGenerators.byteGen(),
                x -> (x >= Byte.MIN_VALUE && x <= Byte.MAX_VALUE));
    }
    @Test
    public void testCharGenerator(){
        test("Character value generated by charGen must be in range",
                BuiltinGenerators.charGen(),
                x -> (x >= Character.MIN_VALUE && x <= Character.MAX_VALUE));
    }
    @Test
    public void testBooleanGenerator(){
        test("Boolean value must be generated by booleanGen",
                BuiltinGenerators.booleanGen(),
                x -> (x== Boolean.TRUE || x== Boolean.FALSE));
    }
    @Test
    public void testShortGenerator(){
        test("Short value generated by shortGen must be in range",
                BuiltinGenerators.shortGen(),
                x -> (x >= Short.MIN_VALUE && x <= Short.MAX_VALUE));
    }
    @Test
    public void testLongGenerator(){
        test("Long value generated by LongGen must be in range",
                BuiltinGenerators.longGen(),
                x -> (x >= Long.MIN_VALUE && x <= Long.MAX_VALUE));
    }
    @Test
    public void testFloatGenerator(){
        test("Float value generated by floatGen must be in range",
                BuiltinGenerators.floatGen(),
                x -> {
                    float val=Math.abs(x);
                    return val>= Float.MIN_VALUE && val <= Float.MAX_VALUE;
                });
    }
    @Test
    public void testDoubleGenerator(){
        test("Double value generated by doubleGen must be in range",
                BuiltinGenerators.doubleGen(),
                x -> {
                    double val=Math.abs(x);
                    return val>= Double.MIN_VALUE && val <= Double.MAX_VALUE;
                });
    }

}
